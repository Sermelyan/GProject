// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structures.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_structures_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_structures_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_structures_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_structures_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_structures_2eproto;
namespace Data {
class In;
class InDefaultTypeInternal;
extern InDefaultTypeInternal _In_default_instance_;
class Out;
class OutDefaultTypeInternal;
extern OutDefaultTypeInternal _Out_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace Data
PROTOBUF_NAMESPACE_OPEN
template<> ::Data::In* Arena::CreateMaybeMessage<::Data::In>(Arena*);
template<> ::Data::Out* Arena::CreateMaybeMessage<::Data::Out>(Arena*);
template<> ::Data::Point* Arena::CreateMaybeMessage<::Data::Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Data {

// ===================================================================

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structures_2eproto);
    return ::descriptor_table_structures_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double X = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double Y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:Data.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structures_2eproto;
};
// -------------------------------------------------------------------

class In :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data.In) */ {
 public:
  In();
  virtual ~In();

  In(const In& from);
  In(In&& from) noexcept
    : In() {
    *this = ::std::move(from);
  }

  inline In& operator=(const In& from) {
    CopyFrom(from);
    return *this;
  }
  inline In& operator=(In&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const In& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const In* internal_default_instance() {
    return reinterpret_cast<const In*>(
               &_In_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(In& a, In& b) {
    a.Swap(&b);
  }
  inline void Swap(In* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline In* New() const final {
    return CreateMaybeMessage<In>(nullptr);
  }

  In* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<In>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const In& from);
  void MergeFrom(const In& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(In* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data.In";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structures_2eproto);
    return ::descriptor_table_structures_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 2,
    kStartPointFieldNumber = 4,
    kEndPointFieldNumber = 5,
    kTimeLimitFieldNumber = 1,
    kMaxDotsFieldNumber = 3,
    kUserIDFieldNumber = 6,
  };
  // repeated string Filters = 2;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  const std::string& filters(int index) const;
  std::string* mutable_filters(int index);
  void set_filters(int index, const std::string& value);
  void set_filters(int index, std::string&& value);
  void set_filters(int index, const char* value);
  void set_filters(int index, const char* value, size_t size);
  std::string* add_filters();
  void add_filters(const std::string& value);
  void add_filters(std::string&& value);
  void add_filters(const char* value);
  void add_filters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filters();
  private:
  const std::string& _internal_filters(int index) const;
  std::string* _internal_add_filters();
  public:

  // .Data.Point StartPoint = 4;
  bool has_startpoint() const;
  private:
  bool _internal_has_startpoint() const;
  public:
  void clear_startpoint();
  const ::Data::Point& startpoint() const;
  ::Data::Point* release_startpoint();
  ::Data::Point* mutable_startpoint();
  void set_allocated_startpoint(::Data::Point* startpoint);
  private:
  const ::Data::Point& _internal_startpoint() const;
  ::Data::Point* _internal_mutable_startpoint();
  public:

  // .Data.Point EndPoint = 5;
  bool has_endpoint() const;
  private:
  bool _internal_has_endpoint() const;
  public:
  void clear_endpoint();
  const ::Data::Point& endpoint() const;
  ::Data::Point* release_endpoint();
  ::Data::Point* mutable_endpoint();
  void set_allocated_endpoint(::Data::Point* endpoint);
  private:
  const ::Data::Point& _internal_endpoint() const;
  ::Data::Point* _internal_mutable_endpoint();
  public:

  // uint32 TimeLimit = 1;
  void clear_timelimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 timelimit() const;
  void set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timelimit() const;
  void _internal_set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxDots = 3;
  void clear_maxdots();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxdots() const;
  void set_maxdots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxdots() const;
  void _internal_set_maxdots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 UserID = 6;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Data.In)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filters_;
  ::Data::Point* startpoint_;
  ::Data::Point* endpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timelimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxdots_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structures_2eproto;
};
// -------------------------------------------------------------------

class Out :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data.Out) */ {
 public:
  Out();
  virtual ~Out();

  Out(const Out& from);
  Out(Out&& from) noexcept
    : Out() {
    *this = ::std::move(from);
  }

  inline Out& operator=(const Out& from) {
    CopyFrom(from);
    return *this;
  }
  inline Out& operator=(Out&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Out& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Out* internal_default_instance() {
    return reinterpret_cast<const Out*>(
               &_Out_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Out& a, Out& b) {
    a.Swap(&b);
  }
  inline void Swap(Out* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Out* New() const final {
    return CreateMaybeMessage<Out>(nullptr);
  }

  Out* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Out>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Out& from);
  void MergeFrom(const Out& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Out* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data.Out";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structures_2eproto);
    return ::descriptor_table_structures_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutePointsFieldNumber = 1,
    kMaxTimeFieldNumber = 2,
    kUserIDFieldNumber = 3,
  };
  // repeated .Data.Point RoutePoints = 1;
  int routepoints_size() const;
  private:
  int _internal_routepoints_size() const;
  public:
  void clear_routepoints();
  ::Data::Point* mutable_routepoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data::Point >*
      mutable_routepoints();
  private:
  const ::Data::Point& _internal_routepoints(int index) const;
  ::Data::Point* _internal_add_routepoints();
  public:
  const ::Data::Point& routepoints(int index) const;
  ::Data::Point* add_routepoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data::Point >&
      routepoints() const;

  // uint32 MaxTime = 2;
  void clear_maxtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxtime() const;
  void set_maxtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxtime() const;
  void _internal_set_maxtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 UserID = 3;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Data.Out)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data::Point > routepoints_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structures_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double X = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:Data.Point.X)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Data.Point.X)
}

// double Y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:Data.Point.Y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Data.Point.Y)
}

// -------------------------------------------------------------------

// In

// uint32 TimeLimit = 1;
inline void In::clear_timelimit() {
  timelimit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In::_internal_timelimit() const {
  return timelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In::timelimit() const {
  // @@protoc_insertion_point(field_get:Data.In.TimeLimit)
  return _internal_timelimit();
}
inline void In::_internal_set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timelimit_ = value;
}
inline void In::set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timelimit(value);
  // @@protoc_insertion_point(field_set:Data.In.TimeLimit)
}

// repeated string Filters = 2;
inline int In::_internal_filters_size() const {
  return filters_.size();
}
inline int In::filters_size() const {
  return _internal_filters_size();
}
inline void In::clear_filters() {
  filters_.Clear();
}
inline std::string* In::add_filters() {
  // @@protoc_insertion_point(field_add_mutable:Data.In.Filters)
  return _internal_add_filters();
}
inline const std::string& In::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const std::string& In::filters(int index) const {
  // @@protoc_insertion_point(field_get:Data.In.Filters)
  return _internal_filters(index);
}
inline std::string* In::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:Data.In.Filters)
  return filters_.Mutable(index);
}
inline void In::set_filters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Data.In.Filters)
  filters_.Mutable(index)->assign(value);
}
inline void In::set_filters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Data.In.Filters)
  filters_.Mutable(index)->assign(std::move(value));
}
inline void In::set_filters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Data.In.Filters)
}
inline void In::set_filters(int index, const char* value, size_t size) {
  filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Data.In.Filters)
}
inline std::string* In::_internal_add_filters() {
  return filters_.Add();
}
inline void In::add_filters(const std::string& value) {
  filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Data.In.Filters)
}
inline void In::add_filters(std::string&& value) {
  filters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Data.In.Filters)
}
inline void In::add_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Data.In.Filters)
}
inline void In::add_filters(const char* value, size_t size) {
  filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Data.In.Filters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
In::filters() const {
  // @@protoc_insertion_point(field_list:Data.In.Filters)
  return filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
In::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:Data.In.Filters)
  return &filters_;
}

// uint32 MaxDots = 3;
inline void In::clear_maxdots() {
  maxdots_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In::_internal_maxdots() const {
  return maxdots_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In::maxdots() const {
  // @@protoc_insertion_point(field_get:Data.In.MaxDots)
  return _internal_maxdots();
}
inline void In::_internal_set_maxdots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxdots_ = value;
}
inline void In::set_maxdots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxdots(value);
  // @@protoc_insertion_point(field_set:Data.In.MaxDots)
}

// .Data.Point StartPoint = 4;
inline bool In::_internal_has_startpoint() const {
  return this != internal_default_instance() && startpoint_ != nullptr;
}
inline bool In::has_startpoint() const {
  return _internal_has_startpoint();
}
inline void In::clear_startpoint() {
  if (GetArenaNoVirtual() == nullptr && startpoint_ != nullptr) {
    delete startpoint_;
  }
  startpoint_ = nullptr;
}
inline const ::Data::Point& In::_internal_startpoint() const {
  const ::Data::Point* p = startpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Data::Point*>(
      &::Data::_Point_default_instance_);
}
inline const ::Data::Point& In::startpoint() const {
  // @@protoc_insertion_point(field_get:Data.In.StartPoint)
  return _internal_startpoint();
}
inline ::Data::Point* In::release_startpoint() {
  // @@protoc_insertion_point(field_release:Data.In.StartPoint)
  
  ::Data::Point* temp = startpoint_;
  startpoint_ = nullptr;
  return temp;
}
inline ::Data::Point* In::_internal_mutable_startpoint() {
  
  if (startpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::Data::Point>(GetArenaNoVirtual());
    startpoint_ = p;
  }
  return startpoint_;
}
inline ::Data::Point* In::mutable_startpoint() {
  // @@protoc_insertion_point(field_mutable:Data.In.StartPoint)
  return _internal_mutable_startpoint();
}
inline void In::set_allocated_startpoint(::Data::Point* startpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete startpoint_;
  }
  if (startpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      startpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startpoint, submessage_arena);
    }
    
  } else {
    
  }
  startpoint_ = startpoint;
  // @@protoc_insertion_point(field_set_allocated:Data.In.StartPoint)
}

// .Data.Point EndPoint = 5;
inline bool In::_internal_has_endpoint() const {
  return this != internal_default_instance() && endpoint_ != nullptr;
}
inline bool In::has_endpoint() const {
  return _internal_has_endpoint();
}
inline void In::clear_endpoint() {
  if (GetArenaNoVirtual() == nullptr && endpoint_ != nullptr) {
    delete endpoint_;
  }
  endpoint_ = nullptr;
}
inline const ::Data::Point& In::_internal_endpoint() const {
  const ::Data::Point* p = endpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Data::Point*>(
      &::Data::_Point_default_instance_);
}
inline const ::Data::Point& In::endpoint() const {
  // @@protoc_insertion_point(field_get:Data.In.EndPoint)
  return _internal_endpoint();
}
inline ::Data::Point* In::release_endpoint() {
  // @@protoc_insertion_point(field_release:Data.In.EndPoint)
  
  ::Data::Point* temp = endpoint_;
  endpoint_ = nullptr;
  return temp;
}
inline ::Data::Point* In::_internal_mutable_endpoint() {
  
  if (endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::Data::Point>(GetArenaNoVirtual());
    endpoint_ = p;
  }
  return endpoint_;
}
inline ::Data::Point* In::mutable_endpoint() {
  // @@protoc_insertion_point(field_mutable:Data.In.EndPoint)
  return _internal_mutable_endpoint();
}
inline void In::set_allocated_endpoint(::Data::Point* endpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete endpoint_;
  }
  if (endpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      endpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpoint, submessage_arena);
    }
    
  } else {
    
  }
  endpoint_ = endpoint;
  // @@protoc_insertion_point(field_set_allocated:Data.In.EndPoint)
}

// uint32 UserID = 6;
inline void In::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 In::userid() const {
  // @@protoc_insertion_point(field_get:Data.In.UserID)
  return _internal_userid();
}
inline void In::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void In::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Data.In.UserID)
}

// -------------------------------------------------------------------

// Out

// repeated .Data.Point RoutePoints = 1;
inline int Out::_internal_routepoints_size() const {
  return routepoints_.size();
}
inline int Out::routepoints_size() const {
  return _internal_routepoints_size();
}
inline void Out::clear_routepoints() {
  routepoints_.Clear();
}
inline ::Data::Point* Out::mutable_routepoints(int index) {
  // @@protoc_insertion_point(field_mutable:Data.Out.RoutePoints)
  return routepoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data::Point >*
Out::mutable_routepoints() {
  // @@protoc_insertion_point(field_mutable_list:Data.Out.RoutePoints)
  return &routepoints_;
}
inline const ::Data::Point& Out::_internal_routepoints(int index) const {
  return routepoints_.Get(index);
}
inline const ::Data::Point& Out::routepoints(int index) const {
  // @@protoc_insertion_point(field_get:Data.Out.RoutePoints)
  return _internal_routepoints(index);
}
inline ::Data::Point* Out::_internal_add_routepoints() {
  return routepoints_.Add();
}
inline ::Data::Point* Out::add_routepoints() {
  // @@protoc_insertion_point(field_add:Data.Out.RoutePoints)
  return _internal_add_routepoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Data::Point >&
Out::routepoints() const {
  // @@protoc_insertion_point(field_list:Data.Out.RoutePoints)
  return routepoints_;
}

// uint32 MaxTime = 2;
inline void Out::clear_maxtime() {
  maxtime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Out::_internal_maxtime() const {
  return maxtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Out::maxtime() const {
  // @@protoc_insertion_point(field_get:Data.Out.MaxTime)
  return _internal_maxtime();
}
inline void Out::_internal_set_maxtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxtime_ = value;
}
inline void Out::set_maxtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxtime(value);
  // @@protoc_insertion_point(field_set:Data.Out.MaxTime)
}

// uint32 UserID = 3;
inline void Out::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Out::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Out::userid() const {
  // @@protoc_insertion_point(field_get:Data.Out.UserID)
  return _internal_userid();
}
inline void Out::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void Out::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Data.Out.UserID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_structures_2eproto
